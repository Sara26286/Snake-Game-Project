# -*- coding: utf-8 -*-
"""Final project. Snake

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JG1ZogAkOn8WnKQJs-G4DzBcsZDTIl97
"""

import random

def draw_map(coordinates, food):
    grid_size = 10
    map_grid = [['.' for _ in range(grid_size)] for _ in range(grid_size)]

    for x, y in coordinates:
        map_grid[x][y] = 'X'

    for fx, fy in food:
        map_grid[fx][fy] = 'x'

    for row in map_grid:
        print(' '.join(row))

def movement(coordinates, direction, grid_size=10):
    x, y = coordinates[-1]

    if direction == 'n':
        x -= 1
    elif direction == 's':
        x += 1
    elif direction == 'e':
        y += 1
    elif direction == 'w':
        y -= 1

    if not (0 <= x < grid_size and 0 <= y < grid_size) or (x, y) in coordinates:
        return False

    coordinates.append((x, y))

    return True

def get_direction():
    while True:
        direction = input("Enter movement direction (n/s/e/w) or 'end' to stop: ").lower()
        if direction in ['n', 's', 'e', 'w', 'end']:
            return direction

def add_food(coordinates, grid_size=10):
    while True:
        x, y = random.randint(0, grid_size-1), random.randint(0, grid_size-1)
        if (x, y) not in coordinates:
            return [(x, y)]

def play_game():
    grid_size = 10
    coordinates = [(0, 0), (0, 1), (0, 2)]

    food = add_food(coordinates, grid_size)

    while True:
        draw_map(coordinates, food)
        direction = get_direction()

        if direction == 'end':
            print("Game Over!")
            break

        if not movement(coordinates, direction, grid_size):
            print("Game Over!")
            break

        if coordinates[-1] == food[0]:  # Check if snake's head is at food position
            food = add_food(coordinates, grid_size)
        else:
            coordinates.pop(0)  # If not at food position, do not remove the tail

# Call this function to play the game
play_game()